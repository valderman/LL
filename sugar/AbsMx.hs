module AbsMx where

-- Haskell module generated by the BNF converter


newtype Id = Id ((Int,Int),String) deriving (Eq,Ord,Show)
data Prog =
   Deriv [Alias] [TyVar] [Binder] Seq
  deriving (Eq,Ord,Show)

data Alias =
   TyAlias Id Type
  deriving (Eq,Ord,Show)

data TyVar =
   TyVar Id
  deriving (Eq,Ord,Show)

data Binder =
   Binder Id Type
  deriving (Eq,Ord,Show)

data MBinder =
   BJust Id Type
 | BNothing Id
  deriving (Eq,Ord,Show)

data Type =
   Tensor Type Type
 | Par Type Type
 | One
 | Bot
 | Plus Type Type
 | Choice Type Type
 | Top
 | Zero
 | Lollipop Type Type
 | TyId Id
 | Bang Type
 | Quest Type
 | Neg Type
 | Forall Id Type
 | Exists Id Type
  deriving (Eq,Ord,Show)

data Choice =
   Fst
 | Snd
  deriving (Eq,Ord,Show)

data Seq =
   Ax Id Id
 | Cut MBinder Seq MBinder Seq
 | ParSeq Id Id Seq Id Seq
 | TensorSeq Id Id Id Seq
 | ChoiceSeq Id Choice Id Seq
 | Case Id Id Seq Id Seq
 | Bottom Id
 | Unit Id Seq
 | Crash Id [Id]
 | Pack Id Id Type Seq
 | Unpack Id Id Id Seq
 | Offer Id Id Seq
 | Demand Id Id Seq
 | Ignore Id Seq
 | Alias Id Id Seq
 | Hole
  deriving (Eq,Ord,Show)

