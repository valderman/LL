module AbsMx where

-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord,Show)
data Prog =
   Deriv [Alias] [Binder] Seq
  deriving (Eq,Ord,Show)

data Alias =
   TyAlias Ident Type
  deriving (Eq,Ord,Show)

data Binder =
   Binder Ident Type
  deriving (Eq,Ord,Show)

data MBinder =
   BJust Ident Type
 | BNothing Ident
  deriving (Eq,Ord,Show)

data Type =
   Tensor Type Type
 | Par Type Type
 | One
 | Bot
 | Plus Type Type
 | Choice Type Type
 | Top
 | Zero
 | Lollipop Type Type
 | TyId Ident
 | Bang Type
 | Quest Type
 | Neg Type
 | Forall Ident Type
 | Exists Ident Type
  deriving (Eq,Ord,Show)

data Choice =
   Fst
 | Snd
  deriving (Eq,Ord,Show)

data Seq =
   Ax Ident Ident
 | Cut MBinder Seq MBinder Seq
 | ParSeq Ident Ident Seq Ident Seq
 | TensorSeq Ident Ident Ident Seq
 | ChoiceSeq Ident Choice Ident Seq
 | Case Ident Ident Seq Ident Seq
 | Bottom Ident
 | Unit Ident Seq
 | Crash Ident [Ident]
 | Pack Ident Ident Type Seq
 | Unpack Ident Ident Ident Seq
 | Offer Binder Seq
 | Demand Binder Ident Seq
 | Ignore Ident Seq
 | Alias Binder Ident Seq
 | Hole
  deriving (Eq,Ord,Show)

