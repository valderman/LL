Prog.   Prog ::= [Alias] [Deriv] ;

Deriv.  Deriv ::= [TyVar] [Binder] "|-" MDerivName Seq ;

separator nonempty Deriv ";" ;

separator Binder "," ;
separator nonempty Id "," ;
terminator TyVar "," ;
terminator Alias ";" ;

-- Used to refer to other derivations
separator Type "," ;

TyAlias. Alias   ::= "type" Id IdList "=" Type ;

ILNil.   IdList  ::= ;
ILCons.  IdList  ::= Id IdList ;

internal TLNil. TyList ::= "[" "]" ;
TLSingle. TyList  ::= Type6 ;
TLCons.   TyList  ::= Type6 TyList ;

TyVar.   TyVar   ::= Id;

Binder.  Binder  ::= Id ":" Type ;

-- Maybe binder
BJust.    MBinder ::= Id ":" Type ;
BNothing. MBinder ::= Id ;

-- Maybe a name for a derivation
DerivName.   MDerivName ::= "[" Id "]" ;
NoDerivName. MDerivName ::= ;

-- Crashing along
AJust.    Along   ::= "along" [Id] ;
ANothing. Along   ::= ;

-- Multiplicatives
Tensor.   Type4 ::= Type4 "*" Type5 ;
Par.      Type4 ::= Type4 "|" Type5 ;
One.      Type6 ::= "1"   ;
Bot.      Type6 ::= "_|_" ;

-- Additives
Plus.     Type3 ::= Type3 "+" Type4 ;
Choice.   Type3 ::= Type3 "&" Type4 ;
Top.      Type6 ::= "T" ;
Zero.     Type6 ::= "0" ;

Lollipop. Type1 ::= Type2 "-o" Type1 ;

AliasTy.  Type5 ::= Id TyList ;
TyId.     Type6 ::= Id ;

Bang.     Type5 ::= "!" Type5 ;
Quest.    Type5 ::= "?" Type5 ;
Neg.      Type5 ::= "~" Type5 ;

-- TODO: Support these applied to (partially-applied) type aliases
Forall.   Type ::= "forall" Id "." Type ;
Exists.   Type ::= "exists" Id "." Type ;
Mu.       Type ::= "mu" Id "." Type ;

coercions Type 6 ;

-- I don't like calling these fst and snd because these are about sums, not tuples
Fst.       Choice ::= "fst" ;
Snd.       Choice ::= "snd" ;

layout "cut", "via", "of" ;

Ax.        Seq ::= Id "<->" Id;
Cut.       Seq ::= "cut" "{" MBinder "->" Seq ";" MBinder "->" Seq "}";
ParSeq.    Seq ::= "connect" Id "via" "{" Id "->" Seq ";" Id "->" Seq "}";
TensorSeq. Seq ::= "let" Id "," Id "=" Id "in" Seq;
ChoiceSeq. Seq ::= "let" Id "=" Choice Id "in" Seq;
Case.      Seq ::= "case" Id "of" "{" "inl" Id "->" Seq ";" "inr" Id "->" Seq "}" ;
Bottom.    Seq ::= Id ;
Unit.      Seq ::= "let" "()" "=" Id "in" Seq ;
Crash.     Seq ::= "crash" Id Along ;
Pack.      Seq ::= "let" Id "=" Id "@" Type "in" Seq ;
Unpack.    Seq ::= "let" Id "@" Id "=" Id "in" Seq ;
Offer.     Seq ::= "offer" Id "for" Id "in" Seq ;
Demand.    Seq ::= "let" Id "=" "demand" Id "in" Seq ;
Ignore.    Seq ::= "ignore" Id "in" Seq ;
Alias.     Seq ::= "let" Id "=" "alias" Id "in" Seq ;
Fold.      Seq ::= "let" Id "=" "fold" Id "in" Seq ;
Unfold.    Seq ::= "let" Id "=" "unfold" Id "in" Seq ;
Refer.     Seq ::= "[" Id "|" [Type] ";" [Id] "]" ;
Hole.      Seq ::= "_" Along ;

position token Id (letter)((letter|digit|'-'|'_'|'\'')*) ;

comment "{-" "-}" ;
comment "--" ;

